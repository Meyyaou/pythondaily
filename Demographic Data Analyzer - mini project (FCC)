import pandas as pd




def calculate_demographic_data(print_data=False):
    # Read data from file
    df = None
    df=pd.read_csv('adult.data.csv')
    print("the dataframe is :")
    print("*"*70)
    print(df.columns.values)
    # How many of each race are represented in this dataset? This should be a Pandas series with race names as the index labels.
    race_count = None
    race_count=df['race'].value_counts()
    #print("RACE COUNT IS :", race_count)

    # What is the average age of men?
    average_age_men = None
    mask= df['sex'] == 'Male'
    average_age_men=df[mask].age.mean()
    print("*"*70)
    #print('average age man: ', average_age_men)

    # What is the percentage of people who have a Bachelor's degree?
    percentage_bachelors = None
    percentage_bachelors=(df[df['education']=='Bachelors'].shape[0] / df.shape[0] ) * 100
    #print("percentageee: ", percentage_bachelors)

    # What percentage of people with advanced education (`Bachelors`, `Masters`, or `Doctorate`) make more than 50K?
    # What percentage of people without advanced education make more than 50K?

    # with and without `Bachelors`, `Masters`, or `Doctorate`
    higher_education = None
    lower_education = None
    mask = (df['education'] == 'Bachelors') | (df['education'] == 'Masters') | (df['education'] == 'Doctorate')
    higher_education=(df[mask].shape[0] / df.shape[0])*100
    lower_education=(df[~mask].shape[0] / df.shape[0])*100
    #print('higher edu :', higher_education, '\n lowerrr: ', lower_education)

    # percentage with salary >50K
    higher_education_rich = None
    lower_education_rich = None
    salary_mask= df['salary'] == '>50K'
    higher_education_rich=(df[mask & salary_mask].shape[0] / df[mask].shape[0])*100
    lower_education_rich=(df[~mask & salary_mask].shape[0] / df[mask].shape[0])*100
    #print("higher rich: ", higher_education_rich, "\nlower rich: ", lower_education_rich)

    # What is the minimum number of hours a person works per week (hours-per-week feature)?
    min_work_hours = None
    min_work_hours= df['hours-per-week'].min()
    #print("minnnnn ", min_work_hours)

    # What percentage of the people who work the minimum number of hours per week have a salary of >50K?
    num_min_workers = None
    num_min_workers=(df[salary_mask & min_work_hours].shape[0] / df.shape[0])*100
    #print("pourcentaaage min hour ", num_min_workers)

    rich_percentage = None
    rich_percentage=(df[salary_mask].shape[0]/df.shape[0])*100
    #print(rich_percentage)

    # What country has the highest percentage of people that earn >50K?
    highest_earning_country = None
    highest_earning_country_percentage = None
    highest_salary=df[df['salary']==df['salary'].max()]
    highest_earning_country=df[highest_salary, 'country']

    highest_earning_country_percentage = (df[highest_earning_country].shape[0] / df.shape[0])*100
    print('hhighhhhhh country', highest_earning_country_percentage)

    # Identify the most popular occupation for those who earn >50K in India.
    top_IN_occupation = None
    

    # DO NOT MODIFY BELOW THIS LINE

    '''if print_data:
        print("Number of each race:\n", race_count) 
        print("Average age of men:", average_age_men)
        print(f"Percentage with Bachelors degrees: {percentage_bachelors}%")
        print(f"Percentage with higher education that earn >50K: {higher_education_rich}%")
        print(f"Percentage without higher education that earn >50K: {lower_education_rich}%")
        print(f"Min work time: {min_work_hours} hours/week")
        print(f"Percentage of rich among those who work fewest hours: {rich_percentage}%")
        print("Country with highest percentage of rich:", highest_earning_country)
        print(f"Highest percentage of rich people in country: {highest_earning_country_percentage}%")
        print("Top occupations in India:", top_IN_occupation)
'''
    return {
        'race_count': race_count,
        'average_age_men': average_age_men,
        'percentage_bachelors': percentage_bachelors,
        'higher_education_rich': higher_education_rich,
        'lower_education_rich': lower_education_rich,
        'min_work_hours': min_work_hours,
        'rich_percentage': rich_percentage,
        'highest_earning_country': highest_earning_country,
        'highest_earning_country_percentage':
        highest_earning_country_percentage,
        'top_IN_occupation': top_IN_occupation
    }
